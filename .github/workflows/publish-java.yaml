---
name: Publish package
on:
  workflow_call:
    inputs:
      java-version:
        required: true
        type: string
      working-directory:
        required: false
        type: string
        default: "."
      settings-file:
        required: false
        type: string
      enforcer-fail:
        required: false
        type: boolean
        default: true
      prerelease:
        required: false
        type: boolean
        default: false
    secrets:
      ACCESS_TOKEN:
        required: true
env:
  MAVEN_PHASE: "clean install"
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # pin@v3.1.0
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ inputs.java-version }}
        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2 # pin@v3
        with:
          java-version: ${{ inputs.java-version }}
          distribution: "adopt"
          cache: "maven"
          server-id: github
          server-username: GITHUB_USER_REF
          server-password: GITHUB_TOKEN_REF #pragma: allowlist secret

      - name: Get inital version
        id: initversion
        working-directory: ${{ inputs.working-directory }}
        run: |
          version=$(mvn ${{ inputs.settings-file && format('{0} {1}', '--settings', inputs.settings-file) || '' }} org.apache.maven.plugins:maven-help-plugin:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=${version%-SNAPSHOT}" >> $GITHUB_OUTPUT
        env:
          GITHUB_USER_REF: ${{ github.actor }}
          GITHUB_TOKEN_REF: ${{ secrets.ACCESS_TOKEN }}

      - name: Install git-mkver
        uses: cperezabo/setup-git-mkver@a951720e53a04ed03a3642bd3ce924602418dd4b # pin@v1.2.0

      - name: Create git-mkver config
        working-directory: ${{ inputs.working-directory }}
        run: |
          cat << EOF > mkver.conf
          defaults {
            whenNoValidCommitMessages: NoIncrement
          }
          EOF

      - name: Get new version
        id: newversion
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "version=$(git-mkver next)" >> $GITHUB_OUTPUT

      - name: Update version in POM
        working-directory: ${{ inputs.working-directory }}
        run: |
          mvn versions:set -DnewVersion=${{ steps.newversion.outputs.version }} ${{ inputs.settings-file && format('{0} {1}', '--settings', inputs.settings-file) || '' }}
        env:
          GITHUB_USER_REF: ${{ github.actor }}
          GITHUB_TOKEN_REF: ${{ secrets.ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c # pin@v2

      - name: Build
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # pin@v3
        with:
          context: ${{ inputs.working-directory }}
          file: ${{ inputs.working-directory }}/Dockerfile
          pull: true
          push: false
          build-args: |
            MAVEN_PHASE=${{ env.MAVEN_PHASE }}
            ENFORCER_FAIL=${{ inputs.enforcer-fail }}
          secrets: | #pragma: allowlist secret
            GITHUB_USER_REF=${{ github.actor }}
            GITHUB_TOKEN_REF=${{ secrets.ACCESS_TOKEN }}
          cache-from: type=gha,scope=build
          cache-to: type=gha,scope=build,mode=max
          target: build

      - name: Extract target
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # pin@v3
        with:
          context: ${{ inputs.working-directory }}
          file: ${{ inputs.working-directory }}/Dockerfile
          push: false
          build-args: |
            MAVEN_PHASE=${{ env.MAVEN_PHASE }}
            ENFORCER_FAIL=${{ inputs.enforcer-fail }}
          secrets: | #pragma: allowlist secret
            GITHUB_USER_REF=${{ github.actor }}
            GITHUB_TOKEN_REF=${{ secrets.ACCESS_TOKEN }}
          cache-from: type=gha,scope=build
          outputs: type=local,dest=${{ inputs.working-directory }}/target
          target: target

      - name: Fail on failure of previous build step
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # pin@v3
        with:
          context: ${{ inputs.working-directory }}
          file: ${{ inputs.working-directory }}/Dockerfile
          push: false
          build-args: |
            MAVEN_PHASE=${{ env.MAVEN_PHASE }}
            ENFORCER_FAIL=${{ inputs.enforcer-fail }}
          secrets: | #pragma: allowlist secret
            GITHUB_USER_REF=${{ github.actor }}
            GITHUB_TOKEN_REF=${{ secrets.ACCESS_TOKEN }}
          cache-from: type=gha,scope=build
          target: status

      - name: Test summary
        if: always()
        uses: test-summary/action@62bc5c68de2a6a0d02039763b8c754569df99e3f # pin@v2
        with:
          paths: "${{ inputs.working-directory }}/target/**/TEST-*.xml"

      - name: Archive test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin@v3
        with:
          name: test-report
          path: |
            ${{ inputs.working-directory }}/target/surefire-reports/*

      - name: Output versions
        run: |
          echo "current version = ${{ steps.initversion.outputs.version }}"
          echo "new version = ${{ steps.newversion.outputs.version }}"

      - name: Publish package
        if: steps.initversion.outputs.version != steps.newversion.outputs.version
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.settings-file }}" != '' ]; then
            mvn --batch-mode jar:jar deploy:deploy --settings ${{ inputs.settings-file }}
          elif [ -f "settings.xml" ]; then
            mvn --batch-mode jar:jar deploy:deploy --settings settings.xml
          else
            mvn --batch-mode jar:jar deploy:deploy
          fi
        env:
          GITHUB_USER_REF: ${{ github.actor }}
          GITHUB_TOKEN_REF: ${{ secrets.ACCESS_TOKEN }}

      - name: Set up Node
        if: steps.initversion.outputs.version != steps.newversion.outputs.version
        uses: actions/setup-node@969bd2663942d722d85b6a8626225850c2f7be4b # pin@v3.5.0

      - name: Install conventional-changelog-cli
        if: steps.initversion.outputs.version != steps.newversion.outputs.version
        run: |
          npm install -g conventional-changelog-cli@2.2.2 -D

      - name: Update changelog and create release
        if: steps.initversion.outputs.version != steps.newversion.outputs.version
        run: |
          conventional-changelog -p conventionalcommits -o RELEASE.md -r 1
          git tag v${{ steps.newversion.outputs.version }}
          conventional-changelog -p conventionalcommits -o CHANGELOG.md -r 20
          git tag -d v${{ steps.newversion.outputs.version }}

      # If branch protection is applied to the repository then
      # a PR will need creating and a separate workflow for autoapproving
      # and automerging added.  For subsequent workflows to run
      # a personal access token will be required
      - name: Commit updated pom
        if: steps.initversion.outputs.version != steps.newversion.outputs.version
        working-directory: ${{ inputs.working-directory }}
        run: |
          git config --global user.name ${{ github.actor }}
          git config --global user.email ${{ github.actor }}@users.noreply.github.com
          git add pom.xml CHANGELOG.md
          git commit -m 'chore(release): update pom version to ${{ steps.newversion.outputs.version }} [skip ci]'
          git tag v${{ steps.newversion.outputs.version }}
          git push
          git push origin v${{ steps.newversion.outputs.version }}

      - uses: ncipollo/release-action@4c75f0f2e4ae5f3c807cf0904605408e319dcaac # pin@v1.11.1
        if: steps.initversion.outputs.version != steps.newversion.outputs.version
        with:
          bodyFile: "RELEASE.md"
          artifacts: |
            ${{ inputs.working-directory }}/target/*.jar
            ${{ inputs.working-directory }}/target/*-cyclonedx.json
            ${{ inputs.working-directory }}/target/*-cyclonedx.xml
          tag: v${{ steps.newversion.outputs.version }}
          token: ${{ secrets.ACCESS_TOKEN }}
          prerelease: ${{ inputs.prerelease }}

      - name: Update version in POM to SNAPSHOT
        if: steps.initversion.outputs.version != steps.newversion.outputs.version
        working-directory: ${{ inputs.working-directory }}
        run: |
          mvn versions:set -DnewVersion=${{ steps.newversion.outputs.version }}-SNAPSHOT ${{ inputs.settings-file && format('{0} {1}', '--settings', inputs.settings-file) || '' }}
        env:
          GITHUB_USER_REF: ${{ github.actor }}
          GITHUB_TOKEN_REF: ${{ secrets.ACCESS_TOKEN }}

      - name: Commit updated pom
        if: steps.initversion.outputs.version != steps.newversion.outputs.version
        working-directory: ${{ inputs.working-directory }}
        run: |
          git config --global user.name ${{ github.actor }}
          git config --global user.email ${{ github.actor }}@users.noreply.github.com
          git add pom.xml
          git commit -m 'chore(release): update pom version to ${{ steps.newversion.outputs.version }}-SNAPSHOT [skip ci]'
          git push
