---
# yamllint disable rule:line-length
name: Build and Publish Poetry Docker Image Artifact
on:
  workflow_call:
    inputs:
      image-name:
        description: Docker image name
        required: true
        type: string
      dockerfile-build:
        description: Name of Dockerfile for builder container
        required: false
        default: "Dockerfile.build"
        type: string
      dockerfile-prod:
        description: Name of Dockerfile for production container
        required: false
        default: "Dockerfile.prod"
        type: string
      dockerfile-test:
        description: Name of Dockerfile for production container
        required: false
        default: "Dockerfile.build"
        type: string
      volumes:
        description: Newline separated list of volumes to attach to build container
        required: false
        default: ""
        type: string
      env:
        description: Newline separated list of environment variables to inject into build container
        required: false
        default: ""
        type: string
      build-command:
        description: Command to run inside build container
        required: false
        default: "None"
        type: string
      test-command:
        description: Command to run inside test container
        required: false
        default: "None"
        type: string
      branch-prerelease:
        description: "Branch to use for prereleases"
        required: false
        default: "prerelease"
        type: string
      branch-update-base:
        description: "Base name of temporary branch to use for creating update"
        required: false
        default: "chore/publish-update"
        type: string
      tag-prefix:
        description: "Prefix to use for version number when creating tag"
        required: false
        default: "v"
        type: string
      working-directory:
        description: "Working directory"
        required: false
        default: "."
        type: string
      templated-files:
        description: "Templated files to update with new tag"
        required: false
        default: ""
        type: string
      output-checks-directory:
        description: Output directory of checks
        required: false
        default: "outputs/checks"
        type: string
      output-unit-tests-directory:
        description: Output directory of unit tests
        required: false
        default: "outputs/unit-tests"
        type: string
      output-coverage-directory:
        description: Output directory of coverage
        required: false
        default: "outputs/coverage"
        type: string
      output-integration-tests-directory:
        description: Output directory of integration tests
        required: false
        default: "outputs/integration-tests"
        type: string
      output-e2e-tests-directory:
        description: Output directory of e2e tests
        required: false
        default: "outputs/e2e-tests"
        type: string
      release-on-default-branch:
        description: "Create releases on default branch"
        required: false
        default: true
        type: boolean
      python-version:
        description: Python version
        required: false
        default: latest
        type: string
      poetry-version:
        description: Poetry version
        required: false
        default: latest
        type: string
    secrets:
      ACCESS_TOKEN:
        description: "Access token"
        required: true
      COSIGN_PRIVATE_KEY:
        description: "Cosign private key"
        required: true
      COSIGN_PASSWORD:
        description: "Cosign password"
        required: true
permissions:
  contents: read
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.triggering_actor }}
  cancel-in-progress: true
jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ (github.event_name == 'push' && !contains(github.triggering_actor, '[bot]' )) || (github.event.issue.pull_request && (startsWith(github.event.comment.body, '.publish') || startsWith(github.event.comment.body, '.unpublish') || startsWith(github.event.comment.body, '.finalize'))) }}
    env:
      COMMENT_BODY: "${{ github.event.comment.body }}"
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
      attestations: write
      id-token: write
    steps:
      # publish-workflow-control
      - uses: aps831/gh-actions/publish-workflow-control@master
        id: control
        with:
          tag-prefix: ${{ inputs.tag-prefix }}
          branch-prerelease: ${{ inputs.branch-prerelease }}
          branch-update-base: ${{ inputs.branch-update-base }}
          release-on-default-branch: ${{ inputs.release-on-default-branch }}
          comment-body: "${{ env.COMMENT_BODY }}"
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # publish-workflow-control-start
      - uses: aps831/gh-actions/publish-workflow-control-start@master
        with:
          release-on-default-branch: ${{ inputs.release-on-default-branch }}
          build: ${{ steps.control.outputs.build }}
          publish: ${{ steps.control.outputs.publish }}
          finalize: ${{ steps.control.outputs.finalize }}
          unpublish: ${{ steps.control.outputs.unpublish }}
          ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }} # prevent issue_comment trigger

      # login-github-ghcr
      - uses: aps831/gh-actions/login-github-ghcr@master
        if: ${{ steps.control.outputs.publish == 'true' }}
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # set-up-python
      - uses: aps831/gh-actions/set-up-python@master
        with:
          python-version: ${{ inputs.python-version }}
          poetry-version: ${{ inputs.poetry-version }}

      # project-update-poetry
      - uses: aps831/gh-actions/project-update-poetry@master
        if: ${{ steps.control.outputs.update == 'true' }}
        with:
          version: ${{ steps.control.outputs.version-next }}
          tag: ${{ steps.control.outputs.tag-version-next }}
          working-directory: ${{ inputs.working-directory }}
          templated-files: ${{ inputs.templated-files }}
          branch-event: ${{ steps.control.outputs.branch-event }}
          branch-update: ${{ steps.control.outputs.branch-update }}
          persist-updates: ${{ steps.control.outputs.publish }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # build-docker-image-artifact
      - uses: aps831/gh-actions/build-docker-image-artifact-v2@master
        if: ${{ steps.control.outputs.build == 'true' }}
        id: build
        with:
          image-name: ${{ inputs.image-name }}
          upload-image: ${{ steps.control.outputs.release == 'true' || steps.control.outputs.prerelease == 'true' }}
          branch-build: ${{ steps.control.outputs.branch-build }}
          working-directory: ${{ inputs.working-directory }}
          dockerfile-build: ${{ inputs.dockerfile-build }}
          dockerfile-prod: ${{ inputs.dockerfile-prod }}
          dockerfile-test: ${{ inputs.dockerfile-test }}
          volumes: |
            ${{ inputs.volumes }}
            /tmp:/tmp
          env: ${{ inputs.env }}
          build-command: ${{ inputs.build-command }}
          test-command: ${{ inputs.test-command }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # output-and-upload-poetry-test-outputs
      - uses: aps831/gh-actions/output-and-upload-poetry-test-outputs@master
        if: ${{ always() }}
        with:
          working-directory: ${{ inputs.working-directory }}
          output-checks-directory: ${{ inputs.output-checks-directory }}
          output-unit-tests-directory: ${{ inputs.output-unit-tests-directory }}
          output-coverage-directory: ${{ inputs.output-coverage-directory }}
          output-integration-tests-directory: ${{ inputs.output-integration-tests-directory }}
          output-e2e-tests-directory: ${{ inputs.output-e2e-tests-directory }}

      # project-update-cleanup
      - uses: aps831/gh-actions/project-update-cleanup@master
        if: ${{ failure() && steps.control.outputs.update == 'true' }}
        with:
          tag: ${{ steps.control.outputs.tag-version-next }}
          branch-event: ${{ steps.control.outputs.branch-event }}
          branch-update: ${{ steps.control.outputs.branch-update }}

      # github-release-publish
      - uses: aps831/gh-actions/github-release-publish@master
        if: ${{ steps.control.outputs.publish == 'true' }}
        id: release
        with:
          tag: ${{ steps.control.outputs.tag-version-next }}
          branch-update: ${{ steps.control.outputs.branch-update }}
          prerelease: ${{ steps.control.outputs.prerelease }}
          draft: ${{ steps.control.outputs.draft }}
          build-artifacts-upload-name: ${{ steps.build.outputs.build-artifacts-release-upload-name }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # github-release-unpublish
      - uses: aps831/gh-actions/github-release-unpublish@master
        if: ${{ steps.control.outputs.unpublish == 'true' }}
        with:
          tag: ${{ steps.control.outputs.tag-version-next }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # github-release-finalize
      - uses: aps831/gh-actions/github-release-finalize@master
        if: ${{ steps.control.outputs.finalize == 'true' }}
        with:
          tag: ${{ steps.control.outputs.tag-version-next }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # github-packages-docker-publish
      - uses: aps831/gh-actions/github-packages-docker-publish@master
        if: ${{ steps.control.outputs.publish == 'true' }}
        with:
          image-name: ${{ inputs.image-name }}
          tag: ${{ steps.control.outputs.tag-version-next }}
          build-artifacts-upload-name: ${{ steps.build.outputs.build-artifacts-publish-upload-name }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      # github-packages-unpublish
      - uses: aps831/gh-actions/github-packages-unpublish@master
        if: ${{ steps.control.outputs.unpublish == 'true' }}
        with:
          package-type: "container"
          package-name: "${{ inputs.image-name }}"
          version: ${{ steps.control.outputs.version-next }}
          tag: ${{ steps.control.outputs.tag-version-next }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # project-merge-update-branch
      - uses: aps831/gh-actions/project-merge-update-branch@master
        if: ${{ steps.control.outputs.update == 'true' }}
        with:
          target-branch: ${{ steps.control.outputs.branch-publish }}
          source-branch: ${{ steps.control.outputs.branch-update }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # project-merge-publish-branch
      - uses: aps831/gh-actions/project-merge-publish-branch@master
        if: ${{ steps.control.outputs.finalize == 'true' }}
        with:
          target-branch: ${{ steps.control.outputs.branch-default }}
          source-branch: ${{ steps.control.outputs.branch-publish }}

      # publish-workflow-control-end
      - uses: aps831/gh-actions/publish-workflow-control-end@master
        if: ${{ always() }}
        with:
          release-on-default-branch: ${{ inputs.release-on-default-branch }}
          build: ${{ steps.control.outputs.build }}
          publish: ${{ steps.control.outputs.publish }}
          finalize: ${{ steps.control.outputs.finalize }}
          unpublish: ${{ steps.control.outputs.unpublish }}
          ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }} # prevent issue_comment trigger
